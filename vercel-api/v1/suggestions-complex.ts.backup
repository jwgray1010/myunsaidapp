// vercel-api/v1/suggestions.ts - Clean bridge to Google Cloud
import { VercelRequest, VercelResponse } from '@vercel/node';
import { gcloudClient } from '../_lib/services/gcloudClient';
import { logger } from '../_lib/logger';
import crypto from 'crypto';

export default async function handler(req: VercelRequest, res: VercelResponse) {
  // CORS handling
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Request-Id, X-User-Id');
  
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }
  
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }
  
  const requestId = Math.random().toString(36).substring(2, 15);
  const userId = req.headers['x-user-id'] as string || req.body?.userId || 'anonymous';
  
  logger.info(`[${requestId}] POST /v1/suggestions - User: ${userId}`);
  
  try {
    // Basic validation - ensure we have required fields
    if (!req.body || !req.body.text || !req.body.context || !req.body.attachmentStyle) {
      return res.status(400).json({ 
        error: 'Missing required fields: text, context, attachmentStyle' 
      });
    }
    
    // Validate text SHA256 if provided (iOS security check)
    if (req.body.text_sha256) {
      const actualHash = crypto.createHash('sha256').update(req.body.text, 'utf8').digest('hex');
      if (actualHash !== req.body.text_sha256) {
        return res.status(400).json({
          error: 'Text SHA256 mismatch. Provided hash does not match text content.'
        });
      }
    }
    
    // Bridge the complete request to Google Cloud
    // Google Cloud will handle all the complex processing, caching, user profiling, etc.
    const response = await gcloudClient.generateSuggestions({
      text: req.body.text,
      toneAnalysis: req.body.toneAnalysis || {
        classification: 'neutral',
        confidence: 0.5,
        ui_distribution: { clear: 0.34, caution: 0.33, alert: 0.33 }
      },
      context: req.body.context,
      attachmentStyle: req.body.attachmentStyle,
      userId: userId
    });
    
    if (response.success) {
      logger.info(`[${requestId}] Suggestions generated successfully by Google Cloud`);
      return res.status(200).json(response.data);
    } else {
      logger.error(`[${requestId}] Google Cloud suggestions error: ${response.error}`);
      return res.status(500).json({
        error: 'Suggestions generation failed',
        details: response.error
      });
    }
  } catch (error) {
    logger.error(`[${requestId}] Suggestions bridge error:`, error);
    return res.status(500).json({
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
}